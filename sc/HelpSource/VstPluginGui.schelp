TITLE:: VstPluginGui
summary:: a generic Qt GUI for VstPluginController
categories:: GUI
related:: VstPlugin, VstPluginController

DESCRIPTION::
This class is the default GUI class for link::VstPluginController::.

INSTANCEMETHODS::

METHOD:: new

create a new VstPluginGui instance.

ARGUMENT:: model
the model. Either a VstPluginController instance or code::nil::.

METHOD:: gui
Initialize the GUI.

ARGUMENT:: parent
If parent is code::nil::, the GUI will be displayed in a new top level Window, otherwise it is embedded
in the given parent.

ARGUMENT:: bounds
If parent is code::nil::, this will set the Window geometry, otherwise it
determines the size (and position) of the embedded GUI. If the plugin editor needs more space than emphasis::bounds::,
scrollbars are shown automatically.

DISCUSSION::
Usually, this is called indirectly by link::VstPluginController#-gui::.

Occasionally you might want to call it directly, e.g. to create an initially empty view where you can
set the link::#-model:: later.

METHOD:: model
set/get the model (a link::VstPluginController:: instance).

ARGUMENT:: (newModel)
the new model.

DISCUSSION::
The view's job is to visualize the model. It receives notifications whenever something important in the
model changes, e.g. a new plugin is loaded or a parameter has changed.

You can always swap the model and the view will be updated automatically.
This means you can use a single view to display different models. E.g. you could embed a link::VstPluginGui:: in a larger view
and use a link::Classes/PopUpMenu:: to select a specific link::VstPluginController:: instance which is then used as the model.
Say you have an FX chain with several link::VstPlugin:: instances but you only need to see one at the time.

SUBSECTION:: Customization

The following instance methods allow you to customize the appearance and behaviour of link::VstPluginGui::.
You can also customize globally by setting the class methods of the same name. Instance members override class members.

METHOD:: numRows
the maximal number of rows.

METHOD:: closeOnFree
whether the GUI Window should be closed when the link::VstPlugin:: is freed (doesn't affect embedded GUIs).

METHOD:: sliderWidth
The slider width.
DISCUSSION::
The slider width determines the width of each parameter section.
You might want to increase it, e.g. if parameter names are too long to fit in.

METHOD:: sliderHeight
The slider height.

METHOD:: displayWidth
The parameter display width.
DISCUSSION::
The default size should be fine for most number displays.
You might want to increase it, e.g. if the plugin displays text beyond a few characters.

METHOD:: update
Update the view.
DISCUSSION::
This method is usually called by the model to notify the view for important changes (see link::Classes/Object#-update::).
However, it can also be called by the user (with no arguments) to update the view, e.g. after changing some GUI properties:
code::
// here it's not necessary to call update because the GUI is customized *before* the 'gui' method is called
~gui = VstPluginGui.new(~model).sliderWidth_(250).gui;
// after that you need to call 'update' to see the affect of your customization
~gui.sliderWidth_(300).displayWidth_(80).update;
::

EXAMPLES::

code::
// TODO
::